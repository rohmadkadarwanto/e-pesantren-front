<%- include('../../partials/header') %>
<div class="content-wrapper" id="entitasList">
  <div class="content-header">
    <div class="container">
      <div class="row mb-2">
        <div class="col-sm-6">
          <h1 class="m-0">Data Transaksi Keuangan</h1>
        </div>
        <div class="col-sm-6">
          <div class="float-sm-right">
            <button class="btn btn-success" onclick="showNewTransaksiForm()">Tambah Transaksi</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <section class="content">
    <div class="container">
      <!-- List Transaksi -->
      <div id="transaksiList" class="card">

        <div class="card-header">
          <h3 class="card-title">
            <i class="fas fa-users mr-1"></i>
            Daftar Transaksi
          </h3>
        </div>
        <div class="card-body">
          <table id="dataTable" class="table table-bordered table-striped table-responsive">
            <thead>
              <tr>
                <th>Kode Transaksi</th>
                <th>Kode Nasabah</th>
                <th>Jenis Transaksi</th>
                <th>Tanggal Transaksi</th>
                <th>Keterangan</th>
                <th>Aksi</th>
              </tr>
            </thead>
            <tbody>
              <!-- Data will be loaded dynamically here -->
            </tbody>
          </table>
        </div>
      </div>

      <!-- Create/Edit Form -->
      <div id="transaksiForm" style="display: none;" class="card">
        <div class="card-header">
          <h3 class="card-title"><i class="fas fa-kredit mr-1"></i>Data Transaksi</h3>
        </div>
        <div class="card-body">
          <form data-toggle="validator">
            <div class="form-group">
              <label for="kode_transaksi">Kode Transaksi:</label>
              <input type="text" class="form-control" id="kode_transaksi" name="kode_transaksi" required data-error="Kode Transaksi harus diisi">
            </div>
            <div class="form-group">
              <label for="kode_entitas">Nasabah:</label>
              <select class="form-control" id="kode_entitas" name="kode_entitas" required data-error="Pilih kode entitas"></select>
            </div>
            <div class="form-group">
              <label for="kode_akun">Akun:</label>
              <select class="form-control" id="kode_akun" name="kode_akun" required data-error="Pilih Kode Akun">
                <!-- Options will be loaded dynamically here -->
                <option value="">Pilih Akun</option>
              </select>
            </div>
            <div class="form-group">
              <label for="kode_jenis_transaksi">Jenis Transaksi:</label>
              <select class="form-control" id="kode_jenis_transaksi" name="kode_jenis_transaksi" required data-error="Pilih kode jenis transaksi"></select>
            </div>

            <div class="form-group">
              <label for="jumlah">Nominal:</label>
              <input type="number" class="form-control" id="jumlah" name="jumlah" required>
            </div>
            <div class="form-group">
              <label for="tanggal_transaksi">Tanggal Transaksi:</label>
              <input type="date" class="form-control" id="tanggal_transaksi" name="tanggal_transaksi" required data-error="Tanggal Transaksi harus diisi">
            </div>
            <div class="form-group">
              <label for="keterangan">Keterangan:</label>
              <textarea class="form-control" id="keterangan" name="keterangan" required data-error="Keterangan harus diisi"></textarea>
            </div>

            <input type="hidden" id="id_transaksi" name="id_transaksi">

            <button type="button" class="btn btn-primary" onclick="saveTransaksi()">Save</button>
            <button type="button" class="btn btn-danger" onclick="cancelTransaksiForm()">Cencel</button>
          </form>
        </div>
      </div>

      <div id="transaksiDetail" style="display: none;" class="card">
        <div class="card-header">
          <button class="btn btn-success" onclick="cancelTransaksiDetail()">Kembali</button>
        </div>
        <div class="card-body">
          <ul class="list-group">
            <li class="list-group-item">
              <strong>Kode Transaksi:</strong> <span id="detail_kode_transaksi">Loading</span>
            </li>
            <li class="list-group-item">
              <strong>Kode Nasabah:</strong> <span id="detail_kode_entitas">Loading</span>
            </li>
            <li class="list-group-item">
              <strong>Kode Jenis Transaksi:</strong> <span id="detail_kode_jenis_transaksi">Loading</span>
            </li>
            <li class="list-group-item">
              <strong>Tanggal Transaksi:</strong> <span id="detail_tanggal_transaksi">Loading</span>
            </li>
            <li class="list-group-item">
              <strong>Keterangan:</strong> <span id="detail_keterangan">Loading</span>
            </li>
          </ul>
        </div>
      </div>
    </div>

  </section>
</div>
<script>

document.addEventListener('DOMContentLoaded', () => {
  fetchTransaksiList();
  populateKodeEntitasDropdown(); // Memanggil fungsi baru untuk mengisi dropdown kode_entitas
  populateKodeJenisTransaksiDropdown();
});

  $(document).ready(function () {
    $('form[data-toggle="validator"]').validator();
  });

  //

  document.getElementById('kode_entitas').addEventListener('change', function() {
    const value = this.value;
    fetchAkunKeuanganOptions(value);
  });


  function showNewTransaksiForm() {
    resetTransaksiForm();
    showTransaksiForm();

    const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');
    const kode_akun = `INV${timestamp}`;

    document.getElementById('kode_transaksi').value = kode_akun;



    //populateTipeTransaksiDropdown();

  }

  async function populateKodeJenisTransaksiDropdown() {
    const dropdown = document.getElementById("kode_jenis_transaksi");

    try {
      const response = await fetch(endpointJenisTransaksi);
      const data = await response.json();

      // Bersihkan opsi yang ada
      dropdown.innerHTML = "";

      tipeEntitasOptions = [
        { value: "", text: "Pilih Jenis Transaksi", selected: true, disabled: true },
        ...data.map(jenisTransaksi => ({ value: jenisTransaksi.kode_jenis_transaksi, text: jenisTransaksi.nama_jenis_transaksi + ` (${jenisTransaksi.tipe_transaksi})` }))
      ];

      // Tambahkan opsi baru dari data jenis transaksi
      tipeEntitasOptions.forEach(jenisTransaksi => {
        const newOption = document.createElement("option");
        newOption.value = jenisTransaksi.value;
        newOption.text = jenisTransaksi.text;
        dropdown.appendChild(newOption);
      });
    } catch (error) {
      console.error('Error fetching jenis transaksi list:', error);
    }
  }


  async function fetchAkunKeuanganOptions(kodeEntitas) {
    try {
      const response = await fetch(endpointAkunKeuangan + `/entitas/${kodeEntitas}`);
      const data = await response.json();
      populateAkunKeuanganDropdown(data);
    } catch (error) {
      console.error('Error fetching Akun Keuangan options:', error);
    }
  }

  function populateAkunKeuanganDropdown(akunKeuanganOptions) {
    const dropdown = document.getElementById("kode_akun");

    // Clear existing options
    dropdown.innerHTML = "";

    // Add new options from the fetched data
    akunKeuanganOptions.forEach(option => {
      const newOption = document.createElement("option");
      newOption.value = option.kode_akun;
      newOption.text = option.nama_akun + ' ('+getTipeTransaksiText(option.tipe_transaksi)+')';
      //if(option.tipe_transaksi == 'debit') {
        dropdown.appendChild(newOption);
      //}
    });
  }


  async function populateKodeEntitasDropdown() {
    const dropdown = document.getElementById("kode_entitas");

    try {
      const response = await fetch(endpointEntitas);
      const data = await response.json();

      // Bersihkan opsi yang ada
      dropdown.innerHTML = "";

      tipeEntitasOptions = [
        { value: "", text: "Pilih Nasabah", selected: true, disabled: true },
        ...data.map(entitas => ({ value: entitas.kode_entitas, text: entitas.nama_entitas }))
      ];


      // Tambahkan opsi baru dari data entitas
      tipeEntitasOptions.forEach(entitas => {
        const newOption = document.createElement("option");
        newOption.value = entitas.value;
        newOption.text = entitas.text;
        dropdown.appendChild(newOption);
      });
    } catch (error) {
      console.error('Error fetching entitas list:', error);
    }
  }

  function resetTransaksiForm() {
    const formElements = ['id_transaksi', 'kode_transaksi', 'kode_entitas', 'kode_jenis_transaksi', 'tanggal_transaksi', 'keterangan','jumlah','kode_akun'];
    formElements.forEach(element => {
      document.getElementById(element).value = '';
    });
  }

  async function fetchTransaksiList() {
    try {
      const response = await fetch(endpointTransaksi);
      const data = await response.json();
      displayTransaksiList(data);
    } catch (error) {
      console.error('Error fetching transaksi list:', error);
    }
  }

  function displayTransaksiList(transaksiList) {
    const tbody = document.querySelector('#transaksiList tbody');
    tbody.innerHTML = '';

    transaksiList.forEach(transaksi => {
      const row = `
        <tr>
          <td>${transaksi.kode_transaksi}</td>
          <td>${transaksi.kode_entitas}</td>
          <td>${transaksi.kode_jenis_transaksi}</td>
          <td>${formatDate(transaksi.tanggal_transaksi)}</td>
          <td>${transaksi.keterangan}</td>
          <td>
            <button class="btn btn-light btn-sm" onclick="detailTransaksi('${transaksi.id_transaksi}')">Detail</button>
            <!--button class="btn btn-info btn-sm" onclick="editTransaksi('${transaksi.id_transaksi}')">Edit</button>
            <button class="btn btn-danger btn-sm" onclick="deleteTransaksi('${transaksi.id_transaksi}')">Delete</button-->
          </td>
        </tr>
      `;
      tbody.innerHTML += row;
    });
  }

  function showTransaksiForm() {
    document.getElementById('transaksiForm').style.display = 'block';
    document.getElementById('transaksiList').style.display = 'none';
  }

  function cancelTransaksiForm() {
    document.getElementById('transaksiForm').style.display = 'none';
    document.getElementById('transaksiList').style.display = 'block';
  }

  function showTransaksiDetail() {
    document.getElementById('transaksiDetail').style.display = 'block';
    document.getElementById('transaksiList').style.display = 'none';
  }

  function cancelTransaksiDetail() {
    document.getElementById('transaksiDetail').style.display = 'none';
    document.getElementById('transaksiList').style.display = 'block';
  }

  function editTransaksi(id) {
    fetch(endpointTransaksi + `/${id}`)
      .then(response => response.json())
      .then(data => {
        populateTransaksiForm(data);
        showTransaksiForm();
      })
      .catch(error => {
        console.error('Error fetching transaksi details:', error);
      });
  }

  function detailTransaksi(id) {
    fetch(endpointTransaksi + `/${id}`)
      .then(response => response.json())
      .then(data => {
        showTransaksiDetail();
        populateTransaksiDetail(data);
      })
      .catch(error => {
        console.error('Error fetching transaksi details:', error);
      });
  }

  async function saveTransaksi() {
    const loadingOverlay = showLoadingOverlay();

    try {
      const formData = {
        id_transaksi: document.getElementById('id_transaksi').value,
        kode_transaksi: document.getElementById('kode_transaksi').value,
        kode_entitas: document.getElementById('kode_entitas').value,
        kode_jenis_transaksi: document.getElementById('kode_jenis_transaksi').value,
        tanggal_transaksi: document.getElementById('tanggal_transaksi').value,
        keterangan: document.getElementById('keterangan').value,
        jumlah: document.getElementById('jumlah').value,
        kode_akun: document.getElementById('kode_akun').value,
        //tipe_transaksi: document.getElementById('tipe_transaksi').value,
      };

      const transaksiId = document.getElementById('id_transaksi').value;

      if (transaksiId) {
        const response = await fetch(endpointTransaksi + `/${transaksiId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
        });
        const data = await response.json();
        console.log('Transaksi updated successfully:', data);
        showAlert('success', 'Transaksi updated successfully');
      } else {
        const response = await fetch(endpointTransaksi, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
        });
        const data = await response.json();
        console.log('Transaksi created successfully:', data);
        showAlert('success', 'Transaksi created successfully');
      }

      fetchTransaksiList();
      cancelTransaksiForm();
    } catch (error) {
      console.error('Error saving transaksi:', error);
      showAlert('error', 'Error saving transaksi');
    } finally {
      hideLoadingOverlay(loadingOverlay);
    }
  }

  async function deleteTransaksi(id) {
    if (await showConfirm('Are you sure you want to delete this transaksi?')) {
      const loadingOverlay = showLoadingOverlay();

      try {
        const response = await fetch(endpointTransaksi + `/${id}`, {
          method: 'DELETE',
        });
        const data = await response.json();
        console.log('Transaksi deleted successfully:', data);
        fetchTransaksiList();
        showAlert('success', 'Transaksi deleted successfully');
      } catch (error) {
        console.error('Error deleting transaksi:', error);
        showAlert('error', 'Error deleting transaksi');
      } finally {
        hideLoadingOverlay(loadingOverlay);
      }
    }
  }

  function showAlert(type, message) {
    Swal.fire({
      icon: type,
      title: message,
      showConfirmButton: false,
      timer: 1500,
    });
  }

  async function showConfirm(message) {
    const result = await Swal.fire({
      icon: 'warning',
      title: 'Confirmation',
      text: message,
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!',
    });

    return result.isConfirmed;
  }

  function populateTransaksiForm(data) {
    document.getElementById('id_transaksi').value = data.id_transaksi;
    document.getElementById('kode_transaksi').value = data.kode_transaksi;
    document.getElementById('kode_entitas').value = data.kode_entitas;
    document.getElementById('kode_jenis_transaksi').value = data.kode_jenis_transaksi;
    document.getElementById('tanggal_transaksi').value = data.tanggal_transaksi;
    document.getElementById('keterangan').value = data.keterangan;
    document.getElementById('jumlah').value = data.jumlah;

    document.getElementById('kode_entitas').addEventListener('change', fetchAkunKeuanganOptions(data.kode_entitas));


    /*populateTipeTransaksiDropdown();

    const tipeTransaksiDropdown = document.getElementById('tipe_transaksi');
    for (let i = 0; i < tipeTransaksiDropdown.options.length; i++) {
      if (tipeTransaksiDropdown.options[i].value === data.tipe_transaksi) {
        tipeTransaksiDropdown.options[i].selected = true;
        break;
      }
    }*/

  }

  function populateTransaksiDetail(data) {
    document.getElementById('detail_kode_transaksi').innerText = data.kode_transaksi;
    document.getElementById('detail_kode_entitas').innerText = data.kode_entitas;
    document.getElementById('detail_kode_jenis_transaksi').innerText = data.kode_jenis_transaksi;
    document.getElementById('detail_tanggal_transaksi').innerText = data.tanggal_transaksi;
    document.getElementById('detail_keterangan').innerText = data.keterangan;
  }

  function showLoadingOverlay() {
    const overlay = document.createElement('div');
    overlay.className = 'loading-overlay';
    document.body.appendChild(overlay);
    return overlay;
  }

  function hideLoadingOverlay(overlay) {
    if (overlay) {
      document.body.removeChild(overlay);
    }
  }
</script>
