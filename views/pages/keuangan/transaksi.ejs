<%- include('../../partials/header') %>

<div class="content-wrapper">
  <section class="content-header">
    <div class="container-fluid">
      <div class="row mb-2">
        <div class="col-sm-4">
          <h1>Transaksi</h1>
        </div>
        <div class="col-sm-8 text-right">
          <form id="priodeForm">
            <div class="row">
              <div class="col-8">
                <div class="row">
                  <!-- Start Date -->
                  <div class="col-6">
                    <div class="form-group">
                      <div class="input-group date priode" id="startDate" data-target-input="nearest">
                        <input type="text" class="form-control datetimepicker-input" id="startDateInput" name="startDate" data-target="#startDate" data-toggle="datetimepicker" placeholder="Mulai" required />
                      </div>
                    </div>
                  </div>
                  <!-- End Date -->
                  <div class="col-6">
                  <div class="form-group">
                    <div class="input-group date priode" id="endDate" data-target-input="nearest">
                      <input type="text" class="form-control datetimepicker-input" id="endDateInput" name="endDate" data-target="#endDate" data-toggle="datetimepicker" placeholder="Sampai" required />
                      <div class="input-group-append">
                        <button class="btn btn-default"><i class="fa fa-search"></i></button>
                      </div>
                    </div>
                  </div>
                </div>
                </div>
              </div>
              <!-- Search and Clear Buttons -->
              <div class="col-4">
                <div class="btn btn-danger" onclick="clearPriode()">Clear</div>
                <!-- Tambahkan tombol untuk menampilkan modal form create -->
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#createModal">
                  Buat Transaksi
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </section>

  <section class="content">
    <div class="container-fluid">

      <!-- Info boxes -->
      <div class="row">
        <!-- Total Beban Info Box -->
        <div class="col-12 col-sm-6 col-md-3">
          <div class="info-box">
            <span class="info-box-icon bg-info elevation-1"><i class="fas fa-dollar-sign"></i></span>
            <div class="info-box-content">
              <span class="info-box-text">Total Transaksi</span>
              <span class="info-box-number" id="totalTrasaksi">Loading...</span>
            </div>
          </div>
        </div>
      </div>

      <div class="row">
        <div class="col-12">
          <div class="card">
            <div class="card-body">
              <table id="dataTable" class="table table-bordered table-striped">
                <thead>
                  <tr>
                    <th>Kode Transaksi</th>
                    <th>Akun</th>
                    <th>Sub Akun</th>
                    <th>Jumlah</th>
                    <th>Tipe</th>
                    <th>Dibuat</th>
                    <!-- Tambahkan kolom untuk tombol delete -->
                    <th>Aksi</th>
                  </tr>
                </thead>
                <tbody id="tableBody">
                  <!-- Table content will be dynamically generated here -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</div>

<!-- Modal untuk form create -->
<div class="modal fade" id="createModal" tabindex="-1" role="dialog" aria-labelledby="createModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createModalLabel">Create Transaksi</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <!-- Form create -->
        <form id="createForm">
          <input type="hidden" class="form-control" id="user" value="1">
          <div class="form-group">
            <label for="account">Account</label>
            <select class="form-control" id="account" required>
              <!-- Options will be dynamically generated -->
            </select>
          </div>
          <div class="form-group">
            <label for="subAccount">Sub Account</label>
            <select class="form-control" id="subAccount" required>
              <!-- Options will be dynamically generated -->
            </select>
          </div>
          <div class="form-group">
            <label for="amount">Amount</label>
            <input type="text" class="form-control" id="amount" required>
          </div>
          <div class="form-group">
            <label for="type">Type</label>
            <select class="form-control" id="type" required>
              <option value="Debit">Debit</option>
              <option value="Credit">Credit</option>
            </select>
          </div>
          <div class="form-group">
            <label for="keterangan">Keterangan</label>
            <input type="text" class="form-control" id="keterangan" required>
          </div>
          <div class="form-group">
            <label for="status">Status:</label>
            <select class="form-control" id="status" name="status" required>
              <option value="1">Aktif</option>
              <option value="0">Tidak aktif</option>
            </select>
          </div>
          <button type="submit" class="btn btn-primary">Create</button>
        </form>
      </div>
    </div>
  </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', () => {
  // Call fetch functions for account and sub_account
  fetchAndPopulateTable();
  fetchAccountData();
  fetchSubAccountData();
  fetchLabaTrasaksi();

  // Date picker
  $('.priode').datetimepicker({
    format: 'YYYY-M-D'
  });
});

function clearPriode() {
  fetchAndPopulateTable();
  document.getElementById('startDateInput').value = '';
  document.getElementById('endDateInput').value = '';
}

function fetchLabaTrasaksi() {
  // Fetch data from API endpoint
  fetch('https://api.appschool.biz.id/api/transaksi/laporan')
    .then(response => response.json())
    .then(data => {
      // Process the data and create jsTree nodes
      const nodes = [];

      data.data.forEach(item => {
        nodes.push({
          id: 'account_' + item.transaksi_detail.account.id,
          parent: '#',
          text: item.transaksi_detail.account.name
        });

        if (item.transaksi_detail.sub_account.id !== null) {
          nodes.push({
            id: 'sub_account_' + item.transaksi_detail.sub_account.id,
            parent: 'account_' + item.transaksi_detail.account.id,
            text: item.transaksi_detail.sub_account.name
          });
        }
      });
    })
    .catch(error => console.error('Error fetching data:', error));
}

document.getElementById('priodeForm').addEventListener('submit', function (e) {
  e.preventDefault(); // prevent default form submission

  const form = e.target;
  const formData = new FormData(form);
  const startDate = formData.get('startDate');
  const endDate = formData.get('endDate');

  // Fetch data from API
  fetch(`https://api.appschool.biz.id/api/transaksi/laporan/${startDate}/${endDate}`)
    .then(response => response.json())
    .then(data => {
      // Destroy existing DataTable if it exists
      if ($.fn.DataTable.isDataTable("#dataTable")) {
        $("#dataTable").DataTable().destroy();
      }
      if (data.success) {
        populateTable(data.data);
        calculateTotal(data.data); // Calculate total pendapatan and beban
        initializeDataTable();
      } else {
        console.error('Failed to fetch data from API');
      }
    })
    .catch(error => console.error('Error fetching data:', error));
});

function populateTable(transaksiData) {
  const tableBody = document.getElementById('tableBody');

  // Clear existing table content
  tableBody.innerHTML = '';

  // Populate table with data
  transaksiData.forEach(transaksi => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${transaksi.transaksi_detail.code}</td>
      <td>${transaksi.transaksi_detail.account.name} - (${transaksi.transaksi_detail.account.code})</td>
      <td>${transaksi.transaksi_detail.sub_account.name} - (${transaksi.transaksi_detail.sub_account.code})</td>
      <td>${formatRupiah(transaksi.transaksi_detail.amount)}</td>
      <td>${transaksi.transaksi_detail.type}</td>
      <td>${formatDate(transaksi.transaksi_detail.created_at)}</td>
      <!-- Add delete button calling deleteTransaction function -->
      <td><button class="btn btn-danger" onclick="deleteTransaction('${transaksi.transaksi_detail.code}')">Delete</button></td>
    `;

    tableBody.appendChild(row);
  });
}

function formatDate(dateString) {
  if (dateString) {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('id-ID', options);
  } else {
    return '-';
  }
}

// Add event listener for create form
document.getElementById('createForm').addEventListener('submit', function (event) {
  event.preventDefault();

  const form = document.getElementById('createForm');
  const formData = new FormData(form);

  const user = document.getElementById('user').value;
  const account = document.getElementById('account').value;
  const subAccount = document.getElementById('subAccount').value;
  const amount = document.getElementById('amount').value;
  const type = document.getElementById('type').value;
  const keterangan = document.getElementById('keterangan').value;
  const status = document.getElementById('status').value;

  const createData = {
    user,
    account,
    sub_account: subAccount,
    amount,
    type,
    keterangan,
    status
  };

  // Send data to create endpoint
  fetch('https://api.appschool.biz.id/api/transaksi/create', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(createData),
  })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Refresh table after creating a new transaction
        fetchAndPopulateTable();
        // Close modal
        $('#createModal').modal('hide');
        form.reset();
      } else {
        console.error('Failed to create transaction');
      }
    })
    .catch(error => console.error('Error creating transaction:', error));
});

// Add event listener for delete button
function deleteTransaction(code) {
  if (confirm('Are you sure you want to delete this transaction?')) {
    // Send request to delete endpoint
    fetch(`https://api.appschool.biz.id/api/transaksi/delete/${code}`, {
      method: 'DELETE',
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Refresh table after deleting the transaction
          fetchAndPopulateTable();
        } else {
          console.error('Failed to delete transaction');
        }
      })
      .catch(error => console.error('Error deleting transaction:', error));
  }
}

// Function to fetch and populate the table
function fetchAndPopulateTable() {
  fetch('https://api.appschool.biz.id/api/transaksi/laporan')
    .then(response => response.json())
    .then(data => {
      // Destroy existing DataTable if it exists
      if ($.fn.DataTable.isDataTable("#dataTable")) {
        $("#dataTable").DataTable().destroy();
      }
      if (data.success) {
        populateTable(data.data);
        calculateTotal(data.data); // Calculate total pendapatan and beban
        initializeDataTable();
      } else {
        console.error('Failed to fetch data from API');
      }
    })
    .catch(error => console.error('Error fetching data:', error));
}

// Function to fetch account data from the endpoint
function fetchAccountData() {
  fetch('https://api.appschool.biz.id/api/coa-account')
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Populate select options for account
        const accountSelect = document.getElementById('account');
        accountSelect.innerHTML = '';
        data.data.forEach(account => {
          const option = document.createElement('option');
          option.value = account.code;
          option.text = `${account.name} - (${account.code})`;
          accountSelect.appendChild(option);
        });
      } else {
        console.error('Failed to fetch account data');
      }
    })
    .catch(error => console.error('Error fetching account data:', error));
}

// Function to fetch sub_account data from the endpoint
function fetchSubAccountData() {
  fetch('https://api.appschool.biz.id/api/coa-subaccount')
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Populate select options for sub_account
        const subAccountSelect = document.getElementById('subAccount');
        subAccountSelect.innerHTML = '';
        data.data.forEach(subAccount => {
          const option = document.createElement('option');
          option.value = subAccount.code;
          option.text = `${subAccount.name} - (${subAccount.code})`;
          subAccountSelect.appendChild(option);
        });
      } else {
        console.error('Failed to fetch sub_account data');
      }
    })
    .catch(error => console.error('Error fetching sub_account data:', error));
}

function calculateTotal(labaRugiData) {
  // Calculate total pendapatan and beban
  let totalTrasaksi = 0;

  labaRugiData.forEach(item => {
    totalTrasaksi += parseFloat(item.transaksi_detail.amount) || 0;
  });

  // Display total pendapatan and beban
  document.getElementById('totalTrasaksi').innerText = formatRupiah(`${totalTrasaksi}`);
}

function initializeDataTable() {
  // Initialize DataTable with paging and limit
  $("#dataTable").DataTable({
    "paging": true,
    "pageLength": 10,  // Set the default number of rows per page
    "lengthMenu": [10, 25, 50, 100],  // Set available options for rows per page
    "lengthChange": true,
    "searching": true,
    "ordering": true,
    "info": true,
    "autoWidth": false,
    "responsive": true,
    "buttons": ["copy", "csv", "excel", "pdf", "print", "colvis"]
  }).buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');
}

</script>

<%- include('../../partials/footer') %>
